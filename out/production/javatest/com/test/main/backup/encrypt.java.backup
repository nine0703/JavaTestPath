package com.test.main;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("please input your data :");
        int number =  sc.nextInt(); // get user input data.
        System.out.println("your print data is :"+ number);
        System.out.println("[+] encrypting ...");
        String endata = encrypt(number);    // use encrypt static.
        System.out.println("complete! your encrypted data is :"+ endata);

        // 以下是解码程序和方法。
        System.out.println("-------------------");
        System.out.print("输入待解密数据 :");
        int number2 =  sc.nextInt(); // get user input data.
        System.out.println("你输入的数据是 :"+ number2);
        System.out.println("[+] decrypting ...");
        String dedata = decrypt(number);    // use decrypting static.
        System.out.println("complete! your decrypted data is :"+ dedata);


    }

    private static String encrypt(int number) {
        int[] numbers = cut(number);
        for (int i = 0; i < numbers.length; i++) {
            numbers[i] += 6;
            numbers[i] = numbers[i] % 10;
        }

//        int [] data = revers(numbers);    // 反转函数
        int [] data = revers(numbers,true);  // 方法重构:反转函数

        // 把numbers数组中数据合成字符串。
        String data1 = "";
        for (int j : data) {
            data1 += j;
        }

        return data1;
    }

    private static String decrypt(int number){
        int[] numbers = cut(number);
        numbers = revers(numbers,true);  // 方法重构:反转函数 处理后将数据覆盖numbers数组。
        for (int i = 0; i < numbers.length; i++) {  // 未完成的解密逻辑!!!待重构。
            numbers[i] -= 5;
            numbers[i] = numbers[i] * -1;
        }

        String data1 = "";
        for (int j : numbers) {
            data1 += j;
        }

        return data1;
    }
    private static int[] revers(int[] numbers) {
    // 反转函数
        int [] datacache = new int[4];
        int i = numbers.length-1;
        for (int j : numbers) {
            datacache[i] = j;
            i--;
        }

        return datacache;
    }
    private static int[] revers(int[] numbers,boolean islow) {
    // 方法重构:反转函数
        int [] datacache = new int[4];
        if (islow){
            System.out.println("use new static ....");
            for (int i = 0,j = numbers.length-1; i<j; i++,j--){
                int temp = 0;
                temp = numbers[j];
                numbers[j] = numbers[i];
                numbers[i] = temp;
            }
            return numbers;
        }else {
            System.out.println("use old static ....");
            datacache = revers(numbers);
        }
        return datacache;
    }

    private static int[] cut(int number) {
        // 切片函数
            int[] numbers = new int[4];
            numbers[0] = number / 1000;
            numbers[1] = (number / 100)%10;
            numbers[2] = (number / 10)%10;
            numbers[3] = number % 10;

            return numbers;
        }


}

